I'm hoping that today I finally finish these algorithm challenges involving strings and arrays. Started off on a good note today by completing this challenge:

** Insert an array into another array at a given point **

Solution:

function frankenSplice(arr1, arr2, n) {
  let slicedArr2 = arr2.slice();
  slicedArr2.splice(n, 0, ...arr1);
  return slicedArr2;
} 

console.log(frankenSplice([1, 2, 3], [4, 5, 6], 1)); (This returned [4, 1, 2, 3, 5, 6].

I was approaching this problem the correct way by using the spread operator, but it wasn't returning the anticipated result in my console log. It didn't like that I was trying to return the second line of this code - I'm not sure why that's the case sometimes and not others... anyways, I added a separate return line (line 3) and it worked!

Challenge number two for the day was straight forward:

** Remove all falsey values from an array **

Solution:

function bouncer(arr) {
  for (let i = 0; i < arr.length; i++) {
  return arr.filter(Boolean);
}
}

bouncer([7, "ate", "", false, 9]);

All falsey values evaluate to false, so if you filter by Boolean, it will keep all "true" results and reject all "false" results.

After lunch I completed one more challenge before I had to head to an online rehearsal:

** Find the smallest index a number can be inserted in an array and return that index **

Solution:

function getIndexToIns(arr, num) {
  arr.sort((a,b) => a - b);
  for (let i = 0; i < arr.length; i++) {
    if (arr[i] >= num) {
      return i;
    }
  }
}

console.log(getIndexToIns([5, 3, 20, 3], 5));

This worked, but FreeCodeCamp didn't like it because I didn't include a "return arr.length" line afterwards. This makes sense looking back, because if the number didn't apply to the given array, then you should just return the length of the original array. Whatever, it wasn't very clear.

Almost done - this was the second to last challenge:


** Check to see that every letter in a second string is present in a first string **

I thought I had to do regex on this one, so I was kinda stumped. This was the answer:

function mutation(arr) {
  let test = arr[1].toLowerCase();
  let target = arr[0].toLowerCase();
  for (let i = 0; i < test.length; i++) {
    if (target.indexOf(test[i]) < 0) return false;
  }
  return true;
}

The .indexOf method is not one I've used a lot but after looking at this for a while it made sense to me. If a character isn't in the string, the method returns -1. Knowing that, if you simply loop through character by character and everything is greater than 0, you're good to go!

I did it! I finally finished these algorithm challenges. Here was the final one:

** Split an array into sub arrays of 'x' length **

I spent a lot of time on this one. A lot. I was SO CLOSE, but couldn't get the final number to add as a nested array all by itself. I was using a for loop, but all my code within (splicing the arrays) was correct. I asked for a hint and found that the "while" loop would be much simpler in this case:

function chunkArrayInGroups(arr, size) {
  let newArr = [];
  while (arr.length > 0) {
      newArr.push(arr.splice(0, size));
    }
  return newArr;
  }

It looks so simple afterwards. Sometimes I think I just need to start assuming that not everything has to be fiendishly difficult. 

That's where I'll stop for today - I'll start the next chapter tomorrow - "Object oriented programming". 

- Jeremy








