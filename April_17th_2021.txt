It's a cold, rainy Saturday and I'm looking forward to really diving in and seeing how much of this front end framework tutorial I can work through today.

I'm picking up where I left off yesterday with Sass.

** You can use 'for' loop logic in Sass and you have two options: a 'through' (includes the last item) and a 'to' (not the last item). Here's how it looks in practice:

@for $i from 1 to 6 {
  .text-#{$i} {font-size: 15px * $i;}
}

This will print out the text with the class "text-n" in increasing sizes. 
The #{} syntax lets Sass know to convert it to a string in the real css file:

.text-#{$I} == .text-1, .text-2, etc.

Ok, now things are getting a little abstract. The next exercise is covering how you can use "each" on lists, assigning a variable to the current value from that list item.

Ex. @each $color in blue, black, red {
  .#{$color}-bg {background-color: $color};
}

The colours to be changed are listed at the top, then you map that variable to each "color-bg" class. You can achieve the same result using mapping over key:value pairs:

$colors: (color1: blue, color2: red, color3: green);

@each $key, $color in $colors {
  .#{$color}-text {color: $color;}
}

Here, you define a "colours" object variable, and then map over each key in that object using "@each $key" (which is a "color" in the object "colours").

I think this is clear and that I'm explaining it correctly. I believe I understand each concept, it's just a matter of knowing WHEN to use them. Context is everything, and I guess that will just come with practice. I should spend some time today reading other people's sass code.

You can use 'while' loops as well. Here, you first declare a number variable, then write the loop, and finish by adding one to the variable, so as not to create an infinite loop:

$x: 1;
@while $x < 6 {
  .text-#{$x} {font-size: 15px * $x;}
  $x: $x + 1;
}

This will loop through five items with the 'text-number' class and alter the font size accordingly. I got stuck for a second because I used the '=' as the assignment operator (like you do in JavaScript) but because this is css, I had to use a ':'. Finally, remember to place the semi-colon INSIDE the curly braces (again, like in css, not JS).

You can make files called "partials" in SASS. These are simply small SASS files that hold particular groups of css (mixins, colours, fonts, etc) that can be IMPORTED into the main SCSS file. This keeps your code modular and more organized.

Partials are saved in files that start with an underscore (ex."_mixins.scss). To import this to the main file, simply say:

@import 'mixins'

No underscore or file extension needed. Now you can access all the css in that file!














